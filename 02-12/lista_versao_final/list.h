#ifndef LIST_H
#define LIST_H

#include "list_conf.h"

typedef struct _list* List;

List list(void);
void list_push_back(List l, UserData data); 
void list_push_front(List l, UserData data);
void list_print(List l) ;

/*
 * EXERC√≠CIOS 
 */

/* N√≠vel: üê• ---------------------------------------------------------------- */
/* Retorna o n√∫mero de elementos contidos na lista l */
// int list_size(List l);

/* Retorna o dado do primeiro n√≥ da lista */
// UserData list_front(List l);

/* Retorna o dado do √∫ltimo n√≥ da lista */
// UserData list_last(List l);

/* Se a lista cont√©m um n√≥ armazenando @data, retorna o endere√ßo do n√≥.
 * Caso contr√°rio, retorna NULL */
// Node list_search(List l, UserData data);


/* N√≠vel: üçé -----------------------------------------------------------------*/ 

/* Concatena a lista @q no final da lista @l */
// void list_concat(List l, List q)

/* Remove todos os n√≥s que armazenam o valor de @data */
// void list_delete(List l, UserData data);

/* Remove o primeiro elemento da lista */
// void list_delete_front(List l);

/* Remove o √∫ltimo elemento da lista */
// void list_delete_back(List l);

/* N√≠vel: üßô ---------------------------------------------------------------- */ 

// ALERT: Esse n√≠vel n√£o ser√° cobrado em nenhuma avalia√ß√£o, j√° que s√£o conceitos
// avan√ßados de C. Por√©m, caso voc√™ tenha interesse, s√£o exerc√≠cios bem instrutivos
// que far√£o com que a sua compreens√£o sobre ponteiros seja aprofundada.

/* Se voc√™ prestar aten√ß√£o, definir o tipo do dado da lista como UserData n√£o
 * criou uma lista 100% gen√©rica, j√° que, ao fazer isso, todas as listas do 
 * nosso programa passaram a ter o tipo apelidado por UserData.
 * Entretanto √© muito comum termos, em um mesmo programa, mais de uma lista e 
 * lista que armazenam tipos distintos. 

 * Para fazer uma lista verdadeiramente gen√©rica, teremos que definir o tipo 
 * do campo data da estrutura _node como sendo do tipo `void *`. O tipo `void *`
 * √© um ponteiro gen√©rico. O funcionamento √© basicamente o de um ponteiro normal,
 * mas voc√™ ser√° obrigado a fazer casting quando precisar acessar os dados armazenados.
 * Leia [1] para uma breve introdu√ß√£o ao uso de `void *`.

 * 1: https://www.geeksforgeeks.org/void-pointer-c-cpp/

 * Mudar o tipo do dado armazenado em _node n√£o ser√° a √∫nica modifica√ß√£o que voc√™
 * ter√° que fazer. Veja, se o tipo de endere√ßo passou a ser gen√©rico, isso significa
 * que, por exemplo, `list_delete(List l, void* e)` n√£o sabe interpretar o dado
 * cuja remo√ß√£o √© requerida. O usu√°rio da biblioteca list sabe como o dado deve
 * ser interpretado, mas a biblioteca, gen√©rica, n√£o sabe. 
 * Por isso, na fun√ß√£o ` list_delete`, por exemplo, e em outras, o usu√°rio da
 * biblioteca tamb√©m ter√° que passar o endere√ßo de uma FUN√á√ÉO como argumento. 
 * Essa fun√ß√£o ser√° respons√°vel por dizer se o n√≥ armazena ou n√£o o elemento buscado.
 * Leia [2] para um breve exemplo sobre como passar uma fun√ß√£o como argumento em C.

 * 2: https://www.w3resource.com/c-programming-exercises/c-snippets/how-do-you-pass-a-function-as-a-parameter-in-c.php

 */

  // EXERC√çCIO: adapte toda a interface da sua biblioteca list para torn√°-la verdadeiramente gen√©rica
  // O programa cliente deveria ser capaz de instanciar, por exemplo, uma lista de ints e uma de chars ao mesmo tempo.


#endif
